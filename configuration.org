#+TITLE: Emacs Configuration
#+AUTHOR: Murilo Baldi
#+EMAIL: murilobaldi@tutanota.com

* Package Management
** MELPA
Adding MELPA to package archives to have more packages to download
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("MELPA" . "https://melpa.org/packages/"))
#+END_SRC

** Use-Package
I use =use-package= to manage and maintain all my packages updated.
#+BEGIN_SRC emacs-lisp
  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure nil)

  ;; Load use-package
  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Auto-Compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

** Auto Update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-interval 5
          auto-package-update-delete-old-versions t))
  (auto-package-update-maybe)
#+END_SRC

* General
** About me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Murilo Baldi"
        user-mail-address "murilobaldi@tutanota.com")
#+END_SRC
** Startup
Show time and garbage collection on minibuffer at startup.
Copied this from [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][zzamboni's config]]
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+END_SRC

** Language
UTF-8 everywhere
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+END_SRC

** Keybindings and functions
#+BEGIN_SRC emacs-lisp
  (defun mb/kill-line-backward ()
    "Kill line from cursor to beginning of line."
    (interactive)
    (delete-region
     (point)
     (progn
       (beginning-of-line 1)
       (point))))

  (defun mb/kill-line ()
    "Kill line from cursor to end of line. If cursor is in the beginning
    of line, leave no empty line (remove \n also)."
    (interactive)
    (delete-region
     (point)
     (progn
       (end-of-line 1)
       (point)))
    (if (bolp)
        (delete-char 1)))

  (defun mb/kill-nwords (n)
    "Kill following N words. If argument is negative, kill backward."
    (delete-region
     (point)
     (progn
       (forward-word n)
       (point))))

  (defun mb/kill-word-backward ()
    (interactive)
    (mb/kill-nwords -1))

  (defun mb/kill-word-forward ()
    (interactive)
    (mb/kill-nwords 1))

  (global-set-key (kbd "C-x k")
                  (lambda ()
                    (interactive)
                    (kill-buffer (current-buffer))))

  (global-set-key (kbd "C-<backspace>") 'mb/kill-word-backward)
  (global-set-key (kbd "M-d") 'mb/kill-word-forward)
  (global-set-key (kbd "M-k") 'mb/kill-line-backward)

  ;; Overwrite org-kill-line with my own
  (defalias 'org-kill-line 'mb/kill-line)
  (global-set-key (kbd "C-k") 'mb/kill-line)

  (global-set-key (kbd "s-o") 'other-window)
#+END_SRC

** Font and theme
Currently using JetBrains Mono and Modus Vivendi. Possibly the most unstable part of my config.
#+BEGIN_SRC emacs-lisp
  ;; Setting font size
  (setq font-family "JetBrains Mono")
  (setq font-size "18")

  (add-to-list 'default-frame-alist
               (cons 'font (concat font-family "-" font-size)))

  (custom-set-faces
   '(fixed-pitch ((t (:family font-family)))))

  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi t))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;; Do not show startup screen
  (setq inhibit-splash-screen t)

  ;; no-blinking cursor
  (blink-cursor-mode 0)

  ;; decent scrolling
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

  ;; show line and column numbers
  (line-number-mode t)
  (column-number-mode t)
  ;; disable the annoying bell ring
  (setq ring-bell-function 'ignore)

  (use-package minions
    :ensure t
    :config (minions-mode 1))
#+END_SRC

I find the default mouse wheel scrolling a bit weird, so I change that to avoid
acceleration and set a lower number of line amount to scroll.
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 5) ((control) . nil)))
#+END_SRC

** PDF reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    ;; Setting this as nil saves a lot of startup time
    (setq pdf-view-use-unicode-ligther nil)
    :config
    (pdf-tools-install))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
  ;; Insert timestamp when set DONE
  (require 'org)

  (setq org-log-done t)
  (add-hook 'org-mode-hook 'org-indent-mode)
  ;; Enable Syntax highlighting and indentation on Org Babel
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-files '("~/org"))
  (setq org-archive-location "~/org/history.org_archive::datetree/")
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(d)" "|" "DONE(D)" "CANCELED(c)")))

  (setq org-todo-keyword-faces
        '(("TODO" . "#ebcb8b")
          ("DOING" . "#b48ead")
          ("DONE" . "#a3be8c")
          ("CANCELED" . "#bf616a")))

  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* =Ivy/Swiper=
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
  (use-package ivy
    :ensure t
    :after counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-s" . swiper-isearch)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :ensure t
    :init
    (add-hook 'dired-mode-hook (lambda ()
                                 (dired-hide-dotfiles-mode)
                                 (dired-hide-details-mode)))
    :config
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))
#+END_SRC

* Version control
** =diff-hl=
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  ;; Keybind to open magit
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (setq magit-emacsclient-executable "/usr/bin/em")
    (setq git-commit-summary-max-length 50))
#+END_SRC
** Backup files
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  ;; Set ~/.emacs.d/backups to store my backup files
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))

  (setq backup-by-copying t)
  ;; Keep some old backups
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

* Text manipulation
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
  ;; Show matching bracket
  (show-paren-mode 1)
  ;; Auto-close brackets
  (electric-pair-mode 1)
  (setq-default electric-pair-preserve-balance nil)
  (setq-default electric-pair-skip-whitespace nil)
  ;;Setting 2 soft tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq indent-line-function 'insert-tab)
  (setq backward-delete-char-untabify-method 'hungry)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Activate =company-mode= globally and set completion to =M-/=.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (global-set-key (kbd "M-/") 'company-complete-common))
#+END_SRC

** Programming
*** C/C++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (setq c++-tab-always-indent t
                    indent-tabs-mode t
                    tab-width 4
                    c-basic-offset tab-width
                    c-indent-level tab-width)
              (c-set-offset 'brace-list-intro 'c-basic-offset)
              (c-set-offset 'substatement-open 0)))

  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

*** C#
Enable =Omnisharp= for C# programming
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :init
    (eval-after-load
        'company
      '(add-to-list 'company-backends 'company-omnisharp))
    (add-hook 'csharp-mode-hook #'company-mode)
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-hook 'csharp-mode-hook
              (lambda ()
                (setq indent-tabs-mode t
                      tab-width 4))))
#+END_SRC

*** GDScript
#+BEGIN_SRC emacs-lisp
  (use-package gdscript-mode
    :ensure t
    :config
    (add-hook 'gdscript-mode-hook
              (lambda ())
              (setq gdscript-use-tab-indents t
                    gdscript-tab-width 4
                    gdscript-indent-offset 4)))
#+END_SRC

*** GLSL
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :ensure t)
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (setq indent-tabs-mode t
                      tab-width 4))))
#+END_SRC

*** Javascript
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil
                    tab-width 2
                    js-indent-level tab-width)))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** Objective-C
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode))
  (add-to-list 'magic-mode-alist
               `(,(lambda ()
                    (and (string= (file-name-extension buffer-file-name) "h")
                         (re-search-forward "@\\<interface\\>"
                                            magic-mode-regexp-match-limit t)))
                 . objc-mode))
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode
            (lambda ()
              (setq indent-tabs-mode nil
                    tab-width 4
                    python-indent-offset 4)))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (add-hook 'rust-mode-hook
              (lambda ()
                (setq indent-tabs-mode nil
                      tab-width 4))))
#+END_SRC
*** Web Development
#+BEGIN_SRC emacs-lisp
  ;; Set web-mode config
  (use-package web-mode
    :ensure t
    :init
    (add-hook 'web-mode-hook
              (lambda ()
                (setq tab-width 2
                      indent-tabs-mode nil
                      web-mode-markup-indent-offset 2
                      web-mode-css-indent-offset 2
                      web-mode-code-indent-offset 2
                      web-mode-enable-current-column-highlight t
                      web-mode-enable-current-element-highlight t)))

    :mode
    ("\\.phtml\\'" . web-mode)
    ("\\.tpl\\.php\\'" . web-mode)
    ("\\.[agj]sp\\'" . web-mode)
    ("\\.as[cp]x\\'" . web-mode)
    ("\\.erb\\'" . web-mode)
    ("\\.mustache\\'" . web-mode)
    ("\\.djhtml\\'" . web-mode)
    ("\\.html?\\'" . web-mode))
#+END_SRC

**** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode))
#+END_SRC

**** CSS
Setting CSS indentation to 2
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :config
    (setq indent-tabs-mode nil
          css-indent-offset 2))
#+END_SRC

**** Vuejs
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :ensure t
    :config
    (set-face-background 'mmm-default-submode-face nil))
#+END_SRC

**** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :config
    (setq-default typescript-indent-level 2))
#+END_SRC

** =autoinsert=
I use autoinsert to insert a simple header in my org files.
Got the basic config from [[https://emacs.stackexchange.com/questions/45629/template-for-new-file][this post]].
#+BEGIN_SRC emacs-lisp
  (defun mb/write-org-header ()
    (let* ((filename-sans-extension (file-name-base (buffer-file-name)))
           (org-title (string-join
                       (split-string filename-sans-extension "-") " ")))
      (insert (format "#+TITLE: %s\n" (capitalize org-title)))
      (insert (format "#+AUTHOR: %s\n" user-full-name))
      (insert (format "#+EMAIL: %s\n\n" user-mail-address))))

  (defun mb/write-dot-h ()
    "Writes header for .h files for C and C++."
    (let* ((filename (file-name-base (buffer-file-name))))
      (insert (format "#ifndef _%s_H_\n" (upcase filename)))
      (insert (format "#define _%s_H_\n\n" (upcase filename)))
      (insert "\n\n#endif\n")))


  (use-package autoinsert
    :config
    ;; Avoid prompting for insertion
    (setq auto-insert-query nil)
    ;; reset the alist and use it with org files only,
    ;; then set the hook
    (setq auto-insert-alist nil)
    (add-to-list 'auto-insert-alist  '("\\.org$" . mb/write-org-header))
    (add-to-list 'auto-insert-alist  '("\\.h$" . mb/write-dot-h)))
  (add-hook 'find-file-hook 'auto-insert)
#+END_SRC

* Security
** GPG
Enable pinentry to prompt password on minibuffer
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t
    :init
    (pinentry-start))
#+END_SRC
